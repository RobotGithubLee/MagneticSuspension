//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("07/31/2002 05:04:00")]

namespace AxTeeChart {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{b6c10489-fb89-11d4-93c9-006008a7eed4}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnAfterDraw")]
    public class AxTChart : System.Windows.Forms.AxHost {
        
        private TeeChart.ITChart ocx;
        
        private AxTChartEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxTChart() : 
                base("b6c10489-fb89-11d4-93c9-006008a7eed4") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual TeeChart.IAspect Aspect {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Aspect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Aspect;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual TeeChart.IAxes Axis {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Axis", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Axis;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual TeeChart.ICanvas Canvas {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Canvas", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Canvas;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool ClipPoints {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipPoints", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ClipPoints;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipPoints", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ClipPoints = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual short CtlCursor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Cursor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Cursor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual short DragCursor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DragCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DragCursor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DragCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DragCursor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual TeeChart.EDragMode DragMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DragMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DragMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DragMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool CtlEnabled {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Enabled;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Enabled = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual TeeChart.IExport Export {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Export", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Export;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual TeeChart.ITitles Footer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Footer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Footer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual TeeChart.IPen Frame {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Frame", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Frame;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(22)]
        public virtual TeeChart.ITitles Header {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Header", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Header;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual int CtlHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Height;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Height = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual TeeChart.IImport Import {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Import", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Import;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual int CtlLeft {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Left;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Left = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual TeeChart.ILegend Legend {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Legend", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Legend;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        public virtual TeeChart.IPage Page {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Page", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Page;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual TeeChart.IPanel Panel {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Panel", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Panel;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        public virtual TeeChart.IPrinter Printer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Printer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Printer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        public virtual TeeChart.IScroll Scroll {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Scroll", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Scroll;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(21)]
        public virtual int SeriesCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SeriesCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SeriesCount;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(23)]
        public virtual int CtlTop {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlTop", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Top;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlTop", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Top = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(24)]
        public virtual bool CtlVisible {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Visible;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Visible = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(25)]
        public virtual TeeChart.IWalls Walls {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Walls", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Walls;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(26)]
        public virtual int CtlWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Width;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Width = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(27)]
        public virtual TeeChart.IZoom Zoom {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Zoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Zoom;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(43)]
        public virtual bool TimerEnabled {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TimerEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TimerEnabled;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TimerEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TimerEnabled = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual int TimerInterval {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TimerInterval", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TimerInterval;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TimerInterval", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TimerInterval = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(45)]
        public virtual bool AutoRepaint {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoRepaint", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoRepaint;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoRepaint", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoRepaint = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(47)]
        public virtual TeeChart.IEnvironment Environment {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Environment", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Environment;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(48)]
        public virtual int ChartLink {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ChartLink;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(49)]
        public virtual TeeChart.ITeePoint2D MousePosition {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MousePosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MousePosition;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(51)]
        public virtual TeeChart.IToolList Tools {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Tools", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Tools;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(52)]
        public virtual TeeChart.ITitles SubHeader {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SubHeader", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SubHeader;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(53)]
        public virtual TeeChart.ITitles SubFooter {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SubFooter", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SubFooter;
            }
        }
        
        public event System.EventHandler OnAfterDraw;
        
        public event System.EventHandler OnBeforeDrawSeries;
        
        public event System.EventHandler OnBeforeDrawAxes;
        
        public event System.EventHandler OnClick;
        
        public event ITChartEvents_OnClickAxisEventHandler OnClickAxis;
        
        public event ITChartEvents_OnClickBackgroundEventHandler OnClickBackground;
        
        public event ITChartEvents_OnClickLegendEventHandler OnClickLegend;
        
        public event ITChartEvents_OnClickSeriesEventHandler OnClickSeries;
        
        public event System.EventHandler OnDblClick;
        
        public event ITChartEvents_OnDragDropEventHandler OnDragDrop;
        
        public event ITChartEvents_OnDragOverEventHandler OnDragOver;
        
        public event ITChartEvents_OnEndDragEventHandler OnEndDrag;
        
        public event System.EventHandler OnEnter;
        
        public event System.EventHandler OnExit;
        
        public event ITChartEvents_OnGetAxisLabelEventHandler OnGetAxisLabel;
        
        public event ITChartEvents_OnGetLegendRectEventHandler OnGetLegendRect;
        
        public event ITChartEvents_OnGetNextAxisLabelEventHandler OnGetNextAxisLabel;
        
        public event ITChartEvents_OnMouseDownEventHandler OnMouseDown;
        
        public event ITChartEvents_OnMouseMoveEventHandler OnMouseMove;
        
        public event ITChartEvents_OnMouseUpEventHandler OnMouseUp;
        
        public event System.EventHandler OnPageChange;
        
        public event System.EventHandler OnResize;
        
        public event System.EventHandler OnScroll;
        
        public event System.EventHandler OnStartDrag;
        
        public event System.EventHandler OnUndoZoom;
        
        public event System.EventHandler OnZoom;
        
        public event ITChartEvents_OnAllowScrollEventHandler OnAllowScroll;
        
        public event ITChartEvents_OnGetLegendPosEventHandler OnGetLegendPos;
        
        public event ITChartEvents_OnGetLegendTextEventHandler OnGetLegendText;
        
        public event ITChartEvents_OnDatabaseRecordEventHandler OnDatabaseRecord;
        
        public event System.EventHandler OnTimer;
        
        public event ITChartEvents_OnGetSeriesMarkEventHandler OnGetSeriesMark;
        
        public event ITChartEvents_OnGetSeriesPointerStyleEventHandler OnGetSeriesPointerStyle;
        
        public event ITChartEvents_OnGetSeriesContourLevelEventHandler OnGetSeriesContourLevel;
        
        public event System.EventHandler OnBeforeDrawChart;
        
        public event ITChartEvents_OnSeriesBeforeDrawValuesEventHandler OnSeriesBeforeDrawValues;
        
        public event ITChartEvents_OnSeriesAfterDrawValuesEventHandler OnSeriesAfterDrawValues;
        
        public event ITChartEvents_OnMarkTipToolGetTextEventHandler OnMarkTipToolGetText;
        
        public event ITChartEvents_OnCursorToolChangeEventHandler OnCursorToolChange;
        
        public event System.EventHandler OnDrawLineToolLineDrag;
        
        public event System.EventHandler OnDrawLineToolNewLine;
        
        public event System.EventHandler OnDrawLineToolDraggedLine;
        
        public event System.EventHandler OnDrawLineToolSelectLine;
        
        public event ITChartEvents_OnCalendarSeriesChangeEventHandler OnCalendarSeriesChange;
        
        public event ITChartEvents_OnSeriesBeforeAddEventHandler OnSeriesBeforeAdd;
        
        public virtual TeeChart.ISeries get_aSeries(int seriesIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_aSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            TeeChart.ISeries returnValue = ((TeeChart.ISeries)(this.ocx.get_aSeries(seriesIndex)));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual int AddSeries(TeeChart.ESeriesClass seriesClass) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddSeries(seriesClass)));
            return returnValue;
        }
        
        public virtual void ChangeSeriesType(int seriesIndex, TeeChart.ESeriesClass newSeriesType) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChangeSeriesType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ChangeSeriesType(seriesIndex, newSeriesType);
        }
        
        public virtual int CloneSeries(int sourceSeriesIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CloneSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.CloneSeries(sourceSeriesIndex)));
            return returnValue;
        }
        
        public virtual void Draw(int dC, int left, int top, int right, int bottom) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Draw", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Draw(dC, left, top, right, bottom);
        }
        
        public virtual void ExchangeSeries(int series1, int series2) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExchangeSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ExchangeSeries(series1, series2);
        }
        
        public virtual double GetDateTimeStep(TeeChart.EDateTimeStep dateTimeStep) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDateTimeStep", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetDateTimeStep(dateTimeStep)));
            return returnValue;
        }
        
        public virtual System.Drawing.Color GetFreeSeriesColor(bool checkBackgroundColor) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetFreeSeriesColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.GetFreeSeriesColor(checkBackgroundColor)));
            return GetColorFromOleColor(returnValue);
        }
        
        public virtual TeeChart.ISeries GetLabelsSeries(TeeChart.EAxisType destAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLabelsSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            TeeChart.ISeries returnValue = ((TeeChart.ISeries)(this.ocx.GetLabelsSeries(destAxis)));
            return returnValue;
        }
        
        public virtual bool IsFreeSeriesColor(uint aColor, bool checkBackgroundColor) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsFreeSeriesColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.IsFreeSeriesColor(aColor, checkBackgroundColor)));
            return returnValue;
        }
        
        public virtual void RemoveAllSeries() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveAllSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveAllSeries();
        }
        
        public virtual void RemoveSeries(int seriesIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveSeries(seriesIndex);
        }
        
        public virtual void Repaint() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Repaint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Repaint();
        }
        
        public virtual string SeriesTitleLegend(int aSeriesIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SeriesTitleLegend", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.SeriesTitleLegend(aSeriesIndex)));
            return returnValue;
        }
        
        public virtual void ShowEditor() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowEditor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ShowEditor(((int)(-1)));
        }
        
        public virtual void ShowEditor(int seriesIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowEditor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ShowEditor(seriesIndex);
        }
        
        public virtual void StopMouse() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StopMouse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.StopMouse();
        }
        
        public virtual void EditOneSeries(int seriesIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditOneSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.EditOneSeries(seriesIndex);
        }
        
        public virtual void ChartRect(int left, int top, int right, int bottom) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartRect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ChartRect(left, top, right, bottom);
        }
        
        public virtual void ClearChart() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearChart", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearChart();
        }
        
        public virtual void RefreshData() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RefreshData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RefreshData();
        }
        
        public virtual TeeChart.ISeries Series(int seriesIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Series", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            TeeChart.ISeries returnValue = ((TeeChart.ISeries)(this.ocx.Series(seriesIndex)));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxTChartEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(TeeChart.ITChartEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.ITChart)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnAfterDraw(object sender, System.EventArgs e) {
            if ((this.OnAfterDraw != null)) {
                this.OnAfterDraw(sender, e);
            }
        }
        
        internal void RaiseOnOnBeforeDrawSeries(object sender, System.EventArgs e) {
            if ((this.OnBeforeDrawSeries != null)) {
                this.OnBeforeDrawSeries(sender, e);
            }
        }
        
        internal void RaiseOnOnBeforeDrawAxes(object sender, System.EventArgs e) {
            if ((this.OnBeforeDrawAxes != null)) {
                this.OnBeforeDrawAxes(sender, e);
            }
        }
        
        internal void RaiseOnOnClick(object sender, System.EventArgs e) {
            if ((this.OnClick != null)) {
                this.OnClick(sender, e);
            }
        }
        
        internal void RaiseOnOnClickAxis(object sender, ITChartEvents_OnClickAxisEvent e) {
            if ((this.OnClickAxis != null)) {
                this.OnClickAxis(sender, e);
            }
        }
        
        internal void RaiseOnOnClickBackground(object sender, ITChartEvents_OnClickBackgroundEvent e) {
            if ((this.OnClickBackground != null)) {
                this.OnClickBackground(sender, e);
            }
        }
        
        internal void RaiseOnOnClickLegend(object sender, ITChartEvents_OnClickLegendEvent e) {
            if ((this.OnClickLegend != null)) {
                this.OnClickLegend(sender, e);
            }
        }
        
        internal void RaiseOnOnClickSeries(object sender, ITChartEvents_OnClickSeriesEvent e) {
            if ((this.OnClickSeries != null)) {
                this.OnClickSeries(sender, e);
            }
        }
        
        internal void RaiseOnOnDblClick(object sender, System.EventArgs e) {
            if ((this.OnDblClick != null)) {
                this.OnDblClick(sender, e);
            }
        }
        
        internal void RaiseOnOnDragDrop(object sender, ITChartEvents_OnDragDropEvent e) {
            if ((this.OnDragDrop != null)) {
                this.OnDragDrop(sender, e);
            }
        }
        
        internal void RaiseOnOnDragOver(object sender, ITChartEvents_OnDragOverEvent e) {
            if ((this.OnDragOver != null)) {
                this.OnDragOver(sender, e);
            }
        }
        
        internal void RaiseOnOnEndDrag(object sender, ITChartEvents_OnEndDragEvent e) {
            if ((this.OnEndDrag != null)) {
                this.OnEndDrag(sender, e);
            }
        }
        
        internal void RaiseOnOnEnter(object sender, System.EventArgs e) {
            if ((this.OnEnter != null)) {
                this.OnEnter(sender, e);
            }
        }
        
        internal void RaiseOnOnExit(object sender, System.EventArgs e) {
            if ((this.OnExit != null)) {
                this.OnExit(sender, e);
            }
        }
        
        internal void RaiseOnOnGetAxisLabel(object sender, ITChartEvents_OnGetAxisLabelEvent e) {
            if ((this.OnGetAxisLabel != null)) {
                this.OnGetAxisLabel(sender, e);
            }
        }
        
        internal void RaiseOnOnGetLegendRect(object sender, ITChartEvents_OnGetLegendRectEvent e) {
            if ((this.OnGetLegendRect != null)) {
                this.OnGetLegendRect(sender, e);
            }
        }
        
        internal void RaiseOnOnGetNextAxisLabel(object sender, ITChartEvents_OnGetNextAxisLabelEvent e) {
            if ((this.OnGetNextAxisLabel != null)) {
                this.OnGetNextAxisLabel(sender, e);
            }
        }
        
        internal void RaiseOnOnMouseDown(object sender, ITChartEvents_OnMouseDownEvent e) {
            if ((this.OnMouseDown != null)) {
                this.OnMouseDown(sender, e);
            }
        }
        
        internal void RaiseOnOnMouseMove(object sender, ITChartEvents_OnMouseMoveEvent e) {
            if ((this.OnMouseMove != null)) {
                this.OnMouseMove(sender, e);
            }
        }
        
        internal void RaiseOnOnMouseUp(object sender, ITChartEvents_OnMouseUpEvent e) {
            if ((this.OnMouseUp != null)) {
                this.OnMouseUp(sender, e);
            }
        }
        
        internal void RaiseOnOnPageChange(object sender, System.EventArgs e) {
            if ((this.OnPageChange != null)) {
                this.OnPageChange(sender, e);
            }
        }
        
        internal void RaiseOnOnResize(object sender, System.EventArgs e) {
            if ((this.OnResize != null)) {
                this.OnResize(sender, e);
            }
        }
        
        internal void RaiseOnOnScroll(object sender, System.EventArgs e) {
            if ((this.OnScroll != null)) {
                this.OnScroll(sender, e);
            }
        }
        
        internal void RaiseOnOnStartDrag(object sender, System.EventArgs e) {
            if ((this.OnStartDrag != null)) {
                this.OnStartDrag(sender, e);
            }
        }
        
        internal void RaiseOnOnUndoZoom(object sender, System.EventArgs e) {
            if ((this.OnUndoZoom != null)) {
                this.OnUndoZoom(sender, e);
            }
        }
        
        internal void RaiseOnOnZoom(object sender, System.EventArgs e) {
            if ((this.OnZoom != null)) {
                this.OnZoom(sender, e);
            }
        }
        
        internal void RaiseOnOnAllowScroll(object sender, ITChartEvents_OnAllowScrollEvent e) {
            if ((this.OnAllowScroll != null)) {
                this.OnAllowScroll(sender, e);
            }
        }
        
        internal void RaiseOnOnGetLegendPos(object sender, ITChartEvents_OnGetLegendPosEvent e) {
            if ((this.OnGetLegendPos != null)) {
                this.OnGetLegendPos(sender, e);
            }
        }
        
        internal void RaiseOnOnGetLegendText(object sender, ITChartEvents_OnGetLegendTextEvent e) {
            if ((this.OnGetLegendText != null)) {
                this.OnGetLegendText(sender, e);
            }
        }
        
        internal void RaiseOnOnDatabaseRecord(object sender, ITChartEvents_OnDatabaseRecordEvent e) {
            if ((this.OnDatabaseRecord != null)) {
                this.OnDatabaseRecord(sender, e);
            }
        }
        
        internal void RaiseOnOnTimer(object sender, System.EventArgs e) {
            if ((this.OnTimer != null)) {
                this.OnTimer(sender, e);
            }
        }
        
        internal void RaiseOnOnGetSeriesMark(object sender, ITChartEvents_OnGetSeriesMarkEvent e) {
            if ((this.OnGetSeriesMark != null)) {
                this.OnGetSeriesMark(sender, e);
            }
        }
        
        internal void RaiseOnOnGetSeriesPointerStyle(object sender, ITChartEvents_OnGetSeriesPointerStyleEvent e) {
            if ((this.OnGetSeriesPointerStyle != null)) {
                this.OnGetSeriesPointerStyle(sender, e);
            }
        }
        
        internal void RaiseOnOnGetSeriesContourLevel(object sender, ITChartEvents_OnGetSeriesContourLevelEvent e) {
            if ((this.OnGetSeriesContourLevel != null)) {
                this.OnGetSeriesContourLevel(sender, e);
            }
        }
        
        internal void RaiseOnOnBeforeDrawChart(object sender, System.EventArgs e) {
            if ((this.OnBeforeDrawChart != null)) {
                this.OnBeforeDrawChart(sender, e);
            }
        }
        
        internal void RaiseOnOnSeriesBeforeDrawValues(object sender, ITChartEvents_OnSeriesBeforeDrawValuesEvent e) {
            if ((this.OnSeriesBeforeDrawValues != null)) {
                this.OnSeriesBeforeDrawValues(sender, e);
            }
        }
        
        internal void RaiseOnOnSeriesAfterDrawValues(object sender, ITChartEvents_OnSeriesAfterDrawValuesEvent e) {
            if ((this.OnSeriesAfterDrawValues != null)) {
                this.OnSeriesAfterDrawValues(sender, e);
            }
        }
        
        internal void RaiseOnOnMarkTipToolGetText(object sender, ITChartEvents_OnMarkTipToolGetTextEvent e) {
            if ((this.OnMarkTipToolGetText != null)) {
                this.OnMarkTipToolGetText(sender, e);
            }
        }
        
        internal void RaiseOnOnCursorToolChange(object sender, ITChartEvents_OnCursorToolChangeEvent e) {
            if ((this.OnCursorToolChange != null)) {
                this.OnCursorToolChange(sender, e);
            }
        }
        
        internal void RaiseOnOnDrawLineToolLineDrag(object sender, System.EventArgs e) {
            if ((this.OnDrawLineToolLineDrag != null)) {
                this.OnDrawLineToolLineDrag(sender, e);
            }
        }
        
        internal void RaiseOnOnDrawLineToolNewLine(object sender, System.EventArgs e) {
            if ((this.OnDrawLineToolNewLine != null)) {
                this.OnDrawLineToolNewLine(sender, e);
            }
        }
        
        internal void RaiseOnOnDrawLineToolDraggedLine(object sender, System.EventArgs e) {
            if ((this.OnDrawLineToolDraggedLine != null)) {
                this.OnDrawLineToolDraggedLine(sender, e);
            }
        }
        
        internal void RaiseOnOnDrawLineToolSelectLine(object sender, System.EventArgs e) {
            if ((this.OnDrawLineToolSelectLine != null)) {
                this.OnDrawLineToolSelectLine(sender, e);
            }
        }
        
        internal void RaiseOnOnCalendarSeriesChange(object sender, ITChartEvents_OnCalendarSeriesChangeEvent e) {
            if ((this.OnCalendarSeriesChange != null)) {
                this.OnCalendarSeriesChange(sender, e);
            }
        }
        
        internal void RaiseOnOnSeriesBeforeAdd(object sender, ITChartEvents_OnSeriesBeforeAddEvent e) {
            if ((this.OnSeriesBeforeAdd != null)) {
                this.OnSeriesBeforeAdd(sender, e);
            }
        }
    }
    
    public delegate void ITChartEvents_OnClickAxisEventHandler(object sender, ITChartEvents_OnClickAxisEvent e);
    
    public class ITChartEvents_OnClickAxisEvent {
        
        public int axis;
        
        public TeeChart.EMouseButton button;
        
        public TeeChart.EShiftState shift;
        
        public int x;
        
        public int y;
        
        public ITChartEvents_OnClickAxisEvent(int axis, TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            this.axis = axis;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITChartEvents_OnClickBackgroundEventHandler(object sender, ITChartEvents_OnClickBackgroundEvent e);
    
    public class ITChartEvents_OnClickBackgroundEvent {
        
        public TeeChart.EMouseButton button;
        
        public TeeChart.EShiftState shift;
        
        public int x;
        
        public int y;
        
        public ITChartEvents_OnClickBackgroundEvent(TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITChartEvents_OnClickLegendEventHandler(object sender, ITChartEvents_OnClickLegendEvent e);
    
    public class ITChartEvents_OnClickLegendEvent {
        
        public TeeChart.EMouseButton button;
        
        public TeeChart.EShiftState shift;
        
        public int x;
        
        public int y;
        
        public ITChartEvents_OnClickLegendEvent(TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITChartEvents_OnClickSeriesEventHandler(object sender, ITChartEvents_OnClickSeriesEvent e);
    
    public class ITChartEvents_OnClickSeriesEvent {
        
        public int seriesIndex;
        
        public int valueIndex;
        
        public TeeChart.EMouseButton button;
        
        public TeeChart.EShiftState shift;
        
        public int x;
        
        public int y;
        
        public ITChartEvents_OnClickSeriesEvent(int seriesIndex, int valueIndex, TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            this.seriesIndex = seriesIndex;
            this.valueIndex = valueIndex;
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITChartEvents_OnDragDropEventHandler(object sender, ITChartEvents_OnDragDropEvent e);
    
    public class ITChartEvents_OnDragDropEvent {
        
        public int x;
        
        public int y;
        
        public ITChartEvents_OnDragDropEvent(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITChartEvents_OnDragOverEventHandler(object sender, ITChartEvents_OnDragOverEvent e);
    
    public class ITChartEvents_OnDragOverEvent {
        
        public int x;
        
        public int y;
        
        public TeeChart.EDragState state;
        
        public bool accept;
        
        public ITChartEvents_OnDragOverEvent(int x, int y, TeeChart.EDragState state, bool accept) {
            this.x = x;
            this.y = y;
            this.state = state;
            this.accept = accept;
        }
    }
    
    public delegate void ITChartEvents_OnEndDragEventHandler(object sender, ITChartEvents_OnEndDragEvent e);
    
    public class ITChartEvents_OnEndDragEvent {
        
        public int x;
        
        public int y;
        
        public ITChartEvents_OnEndDragEvent(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITChartEvents_OnGetAxisLabelEventHandler(object sender, ITChartEvents_OnGetAxisLabelEvent e);
    
    public class ITChartEvents_OnGetAxisLabelEvent {
        
        public int axis;
        
        public int seriesIndex;
        
        public int valueIndex;
        
        public string labelText;
        
        public ITChartEvents_OnGetAxisLabelEvent(int axis, int seriesIndex, int valueIndex, string labelText) {
            this.axis = axis;
            this.seriesIndex = seriesIndex;
            this.valueIndex = valueIndex;
            this.labelText = labelText;
        }
    }
    
    public delegate void ITChartEvents_OnGetLegendRectEventHandler(object sender, ITChartEvents_OnGetLegendRectEvent e);
    
    public class ITChartEvents_OnGetLegendRectEvent {
        
        public int left;
        
        public int top;
        
        public int right;
        
        public int bottom;
        
        public ITChartEvents_OnGetLegendRectEvent(int left, int top, int right, int bottom) {
            this.left = left;
            this.top = top;
            this.right = right;
            this.bottom = bottom;
        }
    }
    
    public delegate void ITChartEvents_OnGetNextAxisLabelEventHandler(object sender, ITChartEvents_OnGetNextAxisLabelEvent e);
    
    public class ITChartEvents_OnGetNextAxisLabelEvent {
        
        public int axis;
        
        public int labelIndex;
        
        public double labelValue;
        
        public bool moreLabels;
        
        public ITChartEvents_OnGetNextAxisLabelEvent(int axis, int labelIndex, double labelValue, bool moreLabels) {
            this.axis = axis;
            this.labelIndex = labelIndex;
            this.labelValue = labelValue;
            this.moreLabels = moreLabels;
        }
    }
    
    public delegate void ITChartEvents_OnMouseDownEventHandler(object sender, ITChartEvents_OnMouseDownEvent e);
    
    public class ITChartEvents_OnMouseDownEvent {
        
        public TeeChart.EMouseButton button;
        
        public TeeChart.EShiftState shift;
        
        public int x;
        
        public int y;
        
        public ITChartEvents_OnMouseDownEvent(TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITChartEvents_OnMouseMoveEventHandler(object sender, ITChartEvents_OnMouseMoveEvent e);
    
    public class ITChartEvents_OnMouseMoveEvent {
        
        public TeeChart.EShiftState shift;
        
        public int x;
        
        public int y;
        
        public ITChartEvents_OnMouseMoveEvent(TeeChart.EShiftState shift, int x, int y) {
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITChartEvents_OnMouseUpEventHandler(object sender, ITChartEvents_OnMouseUpEvent e);
    
    public class ITChartEvents_OnMouseUpEvent {
        
        public TeeChart.EMouseButton button;
        
        public TeeChart.EShiftState shift;
        
        public int x;
        
        public int y;
        
        public ITChartEvents_OnMouseUpEvent(TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void ITChartEvents_OnAllowScrollEventHandler(object sender, ITChartEvents_OnAllowScrollEvent e);
    
    public class ITChartEvents_OnAllowScrollEvent {
        
        public TeeChart.EAxisType axis;
        
        public double aMin;
        
        public double aMax;
        
        public bool allowScroll;
        
        public ITChartEvents_OnAllowScrollEvent(TeeChart.EAxisType axis, double aMin, double aMax, bool allowScroll) {
            this.axis = axis;
            this.aMin = aMin;
            this.aMax = aMax;
            this.allowScroll = allowScroll;
        }
    }
    
    public delegate void ITChartEvents_OnGetLegendPosEventHandler(object sender, ITChartEvents_OnGetLegendPosEvent e);
    
    public class ITChartEvents_OnGetLegendPosEvent {
        
        public int itemIndex;
        
        public int x;
        
        public int y;
        
        public int xColor;
        
        public ITChartEvents_OnGetLegendPosEvent(int itemIndex, int x, int y, int xColor) {
            this.itemIndex = itemIndex;
            this.x = x;
            this.y = y;
            this.xColor = xColor;
        }
    }
    
    public delegate void ITChartEvents_OnGetLegendTextEventHandler(object sender, ITChartEvents_OnGetLegendTextEvent e);
    
    public class ITChartEvents_OnGetLegendTextEvent {
        
        public int legendStyle;
        
        public int valueIndex;
        
        public string legendText;
        
        public ITChartEvents_OnGetLegendTextEvent(int legendStyle, int valueIndex, string legendText) {
            this.legendStyle = legendStyle;
            this.valueIndex = valueIndex;
            this.legendText = legendText;
        }
    }
    
    public delegate void ITChartEvents_OnDatabaseRecordEventHandler(object sender, ITChartEvents_OnDatabaseRecordEvent e);
    
    public class ITChartEvents_OnDatabaseRecordEvent {
        
        public int seriesIndex;
        
        public int index;
        
        public bool stopRetrieve;
        
        public ITChartEvents_OnDatabaseRecordEvent(int seriesIndex, int index, bool stopRetrieve) {
            this.seriesIndex = seriesIndex;
            this.index = index;
            this.stopRetrieve = stopRetrieve;
        }
    }
    
    public delegate void ITChartEvents_OnGetSeriesMarkEventHandler(object sender, ITChartEvents_OnGetSeriesMarkEvent e);
    
    public class ITChartEvents_OnGetSeriesMarkEvent {
        
        public int seriesIndex;
        
        public int valueIndex;
        
        public string markText;
        
        public ITChartEvents_OnGetSeriesMarkEvent(int seriesIndex, int valueIndex, string markText) {
            this.seriesIndex = seriesIndex;
            this.valueIndex = valueIndex;
            this.markText = markText;
        }
    }
    
    public delegate void ITChartEvents_OnGetSeriesPointerStyleEventHandler(object sender, ITChartEvents_OnGetSeriesPointerStyleEvent e);
    
    public class ITChartEvents_OnGetSeriesPointerStyleEvent {
        
        public int seriesIndex;
        
        public int valueIndex;
        
        public TeeChart.EPointerStyle aStyle;
        
        public ITChartEvents_OnGetSeriesPointerStyleEvent(int seriesIndex, int valueIndex, TeeChart.EPointerStyle aStyle) {
            this.seriesIndex = seriesIndex;
            this.valueIndex = valueIndex;
            this.aStyle = aStyle;
        }
    }
    
    public delegate void ITChartEvents_OnGetSeriesContourLevelEventHandler(object sender, ITChartEvents_OnGetSeriesContourLevelEvent e);
    
    public class ITChartEvents_OnGetSeriesContourLevelEvent {
        
        public int seriesIndex;
        
        public int levelIndex;
        
        public double levelValue;
        
        public uint levelColor;
        
        public ITChartEvents_OnGetSeriesContourLevelEvent(int seriesIndex, int levelIndex, double levelValue, uint levelColor) {
            this.seriesIndex = seriesIndex;
            this.levelIndex = levelIndex;
            this.levelValue = levelValue;
            this.levelColor = levelColor;
        }
    }
    
    public delegate void ITChartEvents_OnSeriesBeforeDrawValuesEventHandler(object sender, ITChartEvents_OnSeriesBeforeDrawValuesEvent e);
    
    public class ITChartEvents_OnSeriesBeforeDrawValuesEvent {
        
        public int seriesIndex;
        
        public ITChartEvents_OnSeriesBeforeDrawValuesEvent(int seriesIndex) {
            this.seriesIndex = seriesIndex;
        }
    }
    
    public delegate void ITChartEvents_OnSeriesAfterDrawValuesEventHandler(object sender, ITChartEvents_OnSeriesAfterDrawValuesEvent e);
    
    public class ITChartEvents_OnSeriesAfterDrawValuesEvent {
        
        public int seriesIndex;
        
        public ITChartEvents_OnSeriesAfterDrawValuesEvent(int seriesIndex) {
            this.seriesIndex = seriesIndex;
        }
    }
    
    public delegate void ITChartEvents_OnMarkTipToolGetTextEventHandler(object sender, ITChartEvents_OnMarkTipToolGetTextEvent e);
    
    public class ITChartEvents_OnMarkTipToolGetTextEvent {
        
        public int tool;
        
        public string text;
        
        public ITChartEvents_OnMarkTipToolGetTextEvent(int tool, string text) {
            this.tool = tool;
            this.text = text;
        }
    }
    
    public delegate void ITChartEvents_OnCursorToolChangeEventHandler(object sender, ITChartEvents_OnCursorToolChangeEvent e);
    
    public class ITChartEvents_OnCursorToolChangeEvent {
        
        public int tool;
        
        public int x;
        
        public int y;
        
        public double xVal;
        
        public double yVal;
        
        public int series;
        
        public int valueIndex;
        
        public ITChartEvents_OnCursorToolChangeEvent(int tool, int x, int y, double xVal, double yVal, int series, int valueIndex) {
            this.tool = tool;
            this.x = x;
            this.y = y;
            this.xVal = xVal;
            this.yVal = yVal;
            this.series = series;
            this.valueIndex = valueIndex;
        }
    }
    
    public delegate void ITChartEvents_OnCalendarSeriesChangeEventHandler(object sender, ITChartEvents_OnCalendarSeriesChangeEvent e);
    
    public class ITChartEvents_OnCalendarSeriesChangeEvent {
        
        public int series;
        
        public double value;
        
        public ITChartEvents_OnCalendarSeriesChangeEvent(int series, double value) {
            this.series = series;
            this.value = value;
        }
    }
    
    public delegate void ITChartEvents_OnSeriesBeforeAddEventHandler(object sender, ITChartEvents_OnSeriesBeforeAddEvent e);
    
    public class ITChartEvents_OnSeriesBeforeAddEvent {
        
        public int seriesIndex;
        
        public bool moreValues;
        
        public ITChartEvents_OnSeriesBeforeAddEvent(int seriesIndex, bool moreValues) {
            this.seriesIndex = seriesIndex;
            this.moreValues = moreValues;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxTChartEventMulticaster : TeeChart.ITChartEvents {
        
        private AxTChart parent;
        
        public AxTChartEventMulticaster(AxTChart parent) {
            this.parent = parent;
        }
        
        public virtual void OnAfterDraw() {
            System.EventArgs onafterdrawEvent = new System.EventArgs();
            this.parent.RaiseOnOnAfterDraw(this.parent, onafterdrawEvent);
        }
        
        public virtual void OnBeforeDrawSeries() {
            System.EventArgs onbeforedrawseriesEvent = new System.EventArgs();
            this.parent.RaiseOnOnBeforeDrawSeries(this.parent, onbeforedrawseriesEvent);
        }
        
        public virtual void OnBeforeDrawAxes() {
            System.EventArgs onbeforedrawaxesEvent = new System.EventArgs();
            this.parent.RaiseOnOnBeforeDrawAxes(this.parent, onbeforedrawaxesEvent);
        }
        
        public virtual void OnClick() {
            System.EventArgs onclickEvent = new System.EventArgs();
            this.parent.RaiseOnOnClick(this.parent, onclickEvent);
        }
        
        public virtual void OnClickAxis(int axis, TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            ITChartEvents_OnClickAxisEvent onclickaxisEvent = new ITChartEvents_OnClickAxisEvent(axis, button, shift, x, y);
            this.parent.RaiseOnOnClickAxis(this.parent, onclickaxisEvent);
        }
        
        public virtual void OnClickBackground(TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            ITChartEvents_OnClickBackgroundEvent onclickbackgroundEvent = new ITChartEvents_OnClickBackgroundEvent(button, shift, x, y);
            this.parent.RaiseOnOnClickBackground(this.parent, onclickbackgroundEvent);
        }
        
        public virtual void OnClickLegend(TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            ITChartEvents_OnClickLegendEvent onclicklegendEvent = new ITChartEvents_OnClickLegendEvent(button, shift, x, y);
            this.parent.RaiseOnOnClickLegend(this.parent, onclicklegendEvent);
        }
        
        public virtual void OnClickSeries(int seriesIndex, int valueIndex, TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            ITChartEvents_OnClickSeriesEvent onclickseriesEvent = new ITChartEvents_OnClickSeriesEvent(seriesIndex, valueIndex, button, shift, x, y);
            this.parent.RaiseOnOnClickSeries(this.parent, onclickseriesEvent);
        }
        
        public virtual void OnDblClick() {
            System.EventArgs ondblclickEvent = new System.EventArgs();
            this.parent.RaiseOnOnDblClick(this.parent, ondblclickEvent);
        }
        
        public virtual void OnDragDrop(int x, int y) {
            ITChartEvents_OnDragDropEvent ondragdropEvent = new ITChartEvents_OnDragDropEvent(x, y);
            this.parent.RaiseOnOnDragDrop(this.parent, ondragdropEvent);
        }
        
        public virtual void OnDragOver(int x, int y, TeeChart.EDragState state, ref bool accept) {
            ITChartEvents_OnDragOverEvent ondragoverEvent = new ITChartEvents_OnDragOverEvent(x, y, state, accept);
            this.parent.RaiseOnOnDragOver(this.parent, ondragoverEvent);
            accept = ondragoverEvent.accept;
        }
        
        public virtual void OnEndDrag(int x, int y) {
            ITChartEvents_OnEndDragEvent onenddragEvent = new ITChartEvents_OnEndDragEvent(x, y);
            this.parent.RaiseOnOnEndDrag(this.parent, onenddragEvent);
        }
        
        public virtual void OnEnter() {
            System.EventArgs onenterEvent = new System.EventArgs();
            this.parent.RaiseOnOnEnter(this.parent, onenterEvent);
        }
        
        public virtual void OnExit() {
            System.EventArgs onexitEvent = new System.EventArgs();
            this.parent.RaiseOnOnExit(this.parent, onexitEvent);
        }
        
        public virtual void OnGetAxisLabel(int axis, int seriesIndex, int valueIndex, ref string labelText) {
            ITChartEvents_OnGetAxisLabelEvent ongetaxislabelEvent = new ITChartEvents_OnGetAxisLabelEvent(axis, seriesIndex, valueIndex, labelText);
            this.parent.RaiseOnOnGetAxisLabel(this.parent, ongetaxislabelEvent);
            labelText = ongetaxislabelEvent.labelText;
        }
        
        public virtual void OnGetLegendRect(ref int left, ref int top, ref int right, ref int bottom) {
            ITChartEvents_OnGetLegendRectEvent ongetlegendrectEvent = new ITChartEvents_OnGetLegendRectEvent(left, top, right, bottom);
            this.parent.RaiseOnOnGetLegendRect(this.parent, ongetlegendrectEvent);
            left = ongetlegendrectEvent.left;
            top = ongetlegendrectEvent.top;
            right = ongetlegendrectEvent.right;
            bottom = ongetlegendrectEvent.bottom;
        }
        
        public virtual void OnGetNextAxisLabel(int axis, int labelIndex, ref double labelValue, ref bool moreLabels) {
            ITChartEvents_OnGetNextAxisLabelEvent ongetnextaxislabelEvent = new ITChartEvents_OnGetNextAxisLabelEvent(axis, labelIndex, labelValue, moreLabels);
            this.parent.RaiseOnOnGetNextAxisLabel(this.parent, ongetnextaxislabelEvent);
            labelValue = ongetnextaxislabelEvent.labelValue;
            moreLabels = ongetnextaxislabelEvent.moreLabels;
        }
        
        public virtual void OnMouseDown(TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            ITChartEvents_OnMouseDownEvent onmousedownEvent = new ITChartEvents_OnMouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnOnMouseDown(this.parent, onmousedownEvent);
        }
        
        public virtual void OnMouseMove(TeeChart.EShiftState shift, int x, int y) {
            ITChartEvents_OnMouseMoveEvent onmousemoveEvent = new ITChartEvents_OnMouseMoveEvent(shift, x, y);
            this.parent.RaiseOnOnMouseMove(this.parent, onmousemoveEvent);
        }
        
        public virtual void OnMouseUp(TeeChart.EMouseButton button, TeeChart.EShiftState shift, int x, int y) {
            ITChartEvents_OnMouseUpEvent onmouseupEvent = new ITChartEvents_OnMouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnOnMouseUp(this.parent, onmouseupEvent);
        }
        
        public virtual void OnPageChange() {
            System.EventArgs onpagechangeEvent = new System.EventArgs();
            this.parent.RaiseOnOnPageChange(this.parent, onpagechangeEvent);
        }
        
        public virtual void OnResize() {
            System.EventArgs onresizeEvent = new System.EventArgs();
            this.parent.RaiseOnOnResize(this.parent, onresizeEvent);
        }
        
        public virtual void OnScroll() {
            System.EventArgs onscrollEvent = new System.EventArgs();
            this.parent.RaiseOnOnScroll(this.parent, onscrollEvent);
        }
        
        public virtual void OnStartDrag() {
            System.EventArgs onstartdragEvent = new System.EventArgs();
            this.parent.RaiseOnOnStartDrag(this.parent, onstartdragEvent);
        }
        
        public virtual void OnUndoZoom() {
            System.EventArgs onundozoomEvent = new System.EventArgs();
            this.parent.RaiseOnOnUndoZoom(this.parent, onundozoomEvent);
        }
        
        public virtual void OnZoom() {
            System.EventArgs onzoomEvent = new System.EventArgs();
            this.parent.RaiseOnOnZoom(this.parent, onzoomEvent);
        }
        
        public virtual void OnAllowScroll(TeeChart.EAxisType axis, ref double aMin, ref double aMax, ref bool allowScroll) {
            ITChartEvents_OnAllowScrollEvent onallowscrollEvent = new ITChartEvents_OnAllowScrollEvent(axis, aMin, aMax, allowScroll);
            this.parent.RaiseOnOnAllowScroll(this.parent, onallowscrollEvent);
            aMin = onallowscrollEvent.aMin;
            aMax = onallowscrollEvent.aMax;
            allowScroll = onallowscrollEvent.allowScroll;
        }
        
        public virtual void OnGetLegendPos(int itemIndex, ref int x, ref int y, ref int xColor) {
            ITChartEvents_OnGetLegendPosEvent ongetlegendposEvent = new ITChartEvents_OnGetLegendPosEvent(itemIndex, x, y, xColor);
            this.parent.RaiseOnOnGetLegendPos(this.parent, ongetlegendposEvent);
            x = ongetlegendposEvent.x;
            y = ongetlegendposEvent.y;
            xColor = ongetlegendposEvent.xColor;
        }
        
        public virtual void OnGetLegendText(int legendStyle, int valueIndex, ref string legendText) {
            ITChartEvents_OnGetLegendTextEvent ongetlegendtextEvent = new ITChartEvents_OnGetLegendTextEvent(legendStyle, valueIndex, legendText);
            this.parent.RaiseOnOnGetLegendText(this.parent, ongetlegendtextEvent);
            legendText = ongetlegendtextEvent.legendText;
        }
        
        public virtual void OnDatabaseRecord(int seriesIndex, int index, ref bool stopRetrieve) {
            ITChartEvents_OnDatabaseRecordEvent ondatabaserecordEvent = new ITChartEvents_OnDatabaseRecordEvent(seriesIndex, index, stopRetrieve);
            this.parent.RaiseOnOnDatabaseRecord(this.parent, ondatabaserecordEvent);
            stopRetrieve = ondatabaserecordEvent.stopRetrieve;
        }
        
        public virtual void OnTimer() {
            System.EventArgs ontimerEvent = new System.EventArgs();
            this.parent.RaiseOnOnTimer(this.parent, ontimerEvent);
        }
        
        public virtual void OnGetSeriesMark(int seriesIndex, int valueIndex, ref string markText) {
            ITChartEvents_OnGetSeriesMarkEvent ongetseriesmarkEvent = new ITChartEvents_OnGetSeriesMarkEvent(seriesIndex, valueIndex, markText);
            this.parent.RaiseOnOnGetSeriesMark(this.parent, ongetseriesmarkEvent);
            markText = ongetseriesmarkEvent.markText;
        }
        
        public virtual void OnGetSeriesPointerStyle(int seriesIndex, int valueIndex, ref TeeChart.EPointerStyle aStyle) {
            ITChartEvents_OnGetSeriesPointerStyleEvent ongetseriespointerstyleEvent = new ITChartEvents_OnGetSeriesPointerStyleEvent(seriesIndex, valueIndex, aStyle);
            this.parent.RaiseOnOnGetSeriesPointerStyle(this.parent, ongetseriespointerstyleEvent);
            aStyle = ongetseriespointerstyleEvent.aStyle;
        }
        
        public virtual void OnGetSeriesContourLevel(int seriesIndex, int levelIndex, ref double levelValue, ref uint levelColor) {
            ITChartEvents_OnGetSeriesContourLevelEvent ongetseriescontourlevelEvent = new ITChartEvents_OnGetSeriesContourLevelEvent(seriesIndex, levelIndex, levelValue, levelColor);
            this.parent.RaiseOnOnGetSeriesContourLevel(this.parent, ongetseriescontourlevelEvent);
            levelValue = ongetseriescontourlevelEvent.levelValue;
            levelColor = ongetseriescontourlevelEvent.levelColor;
        }
        
        public virtual void OnBeforeDrawChart() {
            System.EventArgs onbeforedrawchartEvent = new System.EventArgs();
            this.parent.RaiseOnOnBeforeDrawChart(this.parent, onbeforedrawchartEvent);
        }
        
        public virtual void OnSeriesBeforeDrawValues(int seriesIndex) {
            ITChartEvents_OnSeriesBeforeDrawValuesEvent onseriesbeforedrawvaluesEvent = new ITChartEvents_OnSeriesBeforeDrawValuesEvent(seriesIndex);
            this.parent.RaiseOnOnSeriesBeforeDrawValues(this.parent, onseriesbeforedrawvaluesEvent);
        }
        
        public virtual void OnSeriesAfterDrawValues(int seriesIndex) {
            ITChartEvents_OnSeriesAfterDrawValuesEvent onseriesafterdrawvaluesEvent = new ITChartEvents_OnSeriesAfterDrawValuesEvent(seriesIndex);
            this.parent.RaiseOnOnSeriesAfterDrawValues(this.parent, onseriesafterdrawvaluesEvent);
        }
        
        public virtual void OnMarkTipToolGetText(int tool, ref string text) {
            ITChartEvents_OnMarkTipToolGetTextEvent onmarktiptoolgettextEvent = new ITChartEvents_OnMarkTipToolGetTextEvent(tool, text);
            this.parent.RaiseOnOnMarkTipToolGetText(this.parent, onmarktiptoolgettextEvent);
            text = onmarktiptoolgettextEvent.text;
        }
        
        public virtual void OnCursorToolChange(int tool, int x, int y, double xVal, double yVal, int series, int valueIndex) {
            ITChartEvents_OnCursorToolChangeEvent oncursortoolchangeEvent = new ITChartEvents_OnCursorToolChangeEvent(tool, x, y, xVal, yVal, series, valueIndex);
            this.parent.RaiseOnOnCursorToolChange(this.parent, oncursortoolchangeEvent);
        }
        
        public virtual void OnDrawLineToolLineDrag() {
            System.EventArgs ondrawlinetoollinedragEvent = new System.EventArgs();
            this.parent.RaiseOnOnDrawLineToolLineDrag(this.parent, ondrawlinetoollinedragEvent);
        }
        
        public virtual void OnDrawLineToolNewLine() {
            System.EventArgs ondrawlinetoolnewlineEvent = new System.EventArgs();
            this.parent.RaiseOnOnDrawLineToolNewLine(this.parent, ondrawlinetoolnewlineEvent);
        }
        
        public virtual void OnDrawLineToolDraggedLine() {
            System.EventArgs ondrawlinetooldraggedlineEvent = new System.EventArgs();
            this.parent.RaiseOnOnDrawLineToolDraggedLine(this.parent, ondrawlinetooldraggedlineEvent);
        }
        
        public virtual void OnDrawLineToolSelectLine() {
            System.EventArgs ondrawlinetoolselectlineEvent = new System.EventArgs();
            this.parent.RaiseOnOnDrawLineToolSelectLine(this.parent, ondrawlinetoolselectlineEvent);
        }
        
        public virtual void OnCalendarSeriesChange(int series, double value) {
            ITChartEvents_OnCalendarSeriesChangeEvent oncalendarserieschangeEvent = new ITChartEvents_OnCalendarSeriesChangeEvent(series, value);
            this.parent.RaiseOnOnCalendarSeriesChange(this.parent, oncalendarserieschangeEvent);
        }
        
        public virtual void OnSeriesBeforeAdd(int seriesIndex, ref bool moreValues) {
            ITChartEvents_OnSeriesBeforeAddEvent onseriesbeforeaddEvent = new ITChartEvents_OnSeriesBeforeAddEvent(seriesIndex, moreValues);
            this.parent.RaiseOnOnSeriesBeforeAdd(this.parent, onseriesbeforeaddEvent);
            moreValues = onseriesbeforeaddEvent.moreValues;
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{b6c1052d-fb89-11d4-93c9-006008a7eed4}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnDblClickSeries")]
    public class AxTeeListBox : System.Windows.Forms.AxHost {
        
        private TeeChart.ITeeListBox ocx;
        
        private AxTeeListBoxEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxTeeListBox() : 
                base("b6c1052d-fb89-11d4-93c9-006008a7eed4") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual TeeChart.TChart Chart {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Chart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int ChartLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartLink = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color Color {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Color", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.Color)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Color", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Color = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual int SelectedSeries {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SelectedSeries;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectedSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SelectedSeries = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool ShowActive {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowActive", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowActive;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowActive", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowActive = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual bool ShowColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowColor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowColor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool ShowTitle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowTitle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowTitle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowTitle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowTitle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual bool ShowIcon {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowIcon;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowIcon", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowIcon = value;
            }
        }
        
        public event ITeeListBoxEvents_OnDblClickSeriesEventHandler OnDblClickSeries;
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void UpdateSeries() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UpdateSeries", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UpdateSeries();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxTeeListBoxEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(TeeChart.ITeeListBoxEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.ITeeListBox)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnDblClickSeries(object sender, ITeeListBoxEvents_OnDblClickSeriesEvent e) {
            if ((this.OnDblClickSeries != null)) {
                this.OnDblClickSeries(sender, e);
            }
        }
    }
    
    public delegate void ITeeListBoxEvents_OnDblClickSeriesEventHandler(object sender, ITeeListBoxEvents_OnDblClickSeriesEvent e);
    
    public class ITeeListBoxEvents_OnDblClickSeriesEvent {
        
        public int seriesIndex;
        
        public ITeeListBoxEvents_OnDblClickSeriesEvent(int seriesIndex) {
            this.seriesIndex = seriesIndex;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxTeeListBoxEventMulticaster : TeeChart.ITeeListBoxEvents {
        
        private AxTeeListBox parent;
        
        public AxTeeListBoxEventMulticaster(AxTeeListBox parent) {
            this.parent = parent;
        }
        
        public virtual void OnDblClickSeries(int seriesIndex) {
            ITeeListBoxEvents_OnDblClickSeriesEvent ondblclickseriesEvent = new ITeeListBoxEvents_OnDblClickSeriesEvent(seriesIndex);
            this.parent.RaiseOnOnDblClickSeries(this.parent, ondblclickseriesEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{b6c10530-fb89-11d4-93c9-006008a7eed4}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    public class AxTeeEditor : System.Windows.Forms.AxHost {
        
        private TeeChart.ITeeEditor ocx;
        
        public AxTeeEditor() : 
                base("b6c10530-fb89-11d4-93c9-006008a7eed4") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual TeeChart.TChart Chart {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Chart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int ChartLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartLink = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual string EditorTitle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditorTitle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EditorTitle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditorTitle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.EditorTitle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual TeeChart.ETeeEditorPage DefaultPage {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DefaultPage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DefaultPage;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DefaultPage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DefaultPage = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual bool AutoRepaint {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoRepaint", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AutoRepaint;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AutoRepaint", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AutoRepaint = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual TeeChart.ITeeEditorShowPages ShowPages {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowPages", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowPages;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual int EditorLink {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditorLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EditorLink;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual TeeChart.ITeeEditorOptions Options {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Options", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Options;
            }
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void ShowEditor() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowEditor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ShowEditor();
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.ITeeEditor)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{b6c10531-fb89-11d4-93c9-006008a7eed4}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    public class AxTeePreviewer : System.Windows.Forms.AxHost {
        
        private TeeChart.ITeePreviewer ocx;
        
        public AxTeePreviewer() : 
                base("b6c10531-fb89-11d4-93c9-006008a7eed4") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual TeeChart.TChart Chart {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Chart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int ChartLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartLink = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual string PreviewTitle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PreviewTitle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PreviewTitle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PreviewTitle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PreviewTitle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color PaperColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PaperColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.PaperColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PaperColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PaperColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual int PreviewerLink {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PreviewerLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PreviewerLink;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual bool Maximized {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Maximized", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Maximized;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Maximized", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Maximized = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual TeeChart.ITeePreviewerOptions Options {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Options", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Options;
            }
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void ShowPreview() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowPreview", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ShowPreview();
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.ITeePreviewer)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{b6c10532-fb89-11d4-93c9-006008a7eed4}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnEditedChart")]
    public class AxTeeCommander : System.Windows.Forms.AxHost {
        
        private TeeChart.ITeeCommander ocx;
        
        private AxTeeCommanderEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxTeeCommander() : 
                base("b6c10532-fb89-11d4-93c9-006008a7eed4") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual TeeChart.TChart Chart {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Chart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int ChartLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartLink = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool LabelValues {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LabelValues", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LabelValues;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LabelValues", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LabelValues = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-501)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color Color {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Color", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.Color)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Color", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Color = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(-514)]
        public override bool Enabled {
            get {
                if (((this.ocx != null) 
                            && (this.PropsValid() == true))) {
                    return this.ocx.Enabled;
                }
                else {
                    return base.Enabled;
                }
            }
            set {
                base.Enabled = value;
                if ((this.ocx != null)) {
                    this.ocx.Enabled = value;
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual TeeChart.TeeEditor Editor {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Editor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Editor = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual TeeChart.TeePreviewer Previewer {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Previewer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Previewer = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual int EditorLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditorLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.EditorLink = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual int PreviewerLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PreviewerLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PreviewerLink = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual bool Vertical {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Vertical", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Vertical;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Vertical", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Vertical = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual object CtlControls {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlControls", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Controls;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlControls", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Controls = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual object Buttons {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Buttons", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Buttons;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Buttons", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Buttons = value;
            }
        }
        
        public event System.EventHandler OnEditedChart;
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxTeeCommanderEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(TeeChart.ITeeCommanderEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.ITeeCommander)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnEditedChart(object sender, System.EventArgs e) {
            if ((this.OnEditedChart != null)) {
                this.OnEditedChart(sender, e);
            }
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxTeeCommanderEventMulticaster : TeeChart.ITeeCommanderEvents {
        
        private AxTeeCommander parent;
        
        public AxTeeCommanderEventMulticaster(AxTeeCommander parent) {
            this.parent = parent;
        }
        
        public virtual void OnEditedChart() {
            System.EventArgs oneditedchartEvent = new System.EventArgs();
            this.parent.RaiseOnOnEditedChart(this.parent, oneditedchartEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{1fdb3feb-a12b-4a8f-9ba7-cc342949d9af}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnChangeMargins")]
    public class AxTeePreviewPanel : System.Windows.Forms.AxHost {
        
        private TeeChart.ITeePreviewPanel ocx;
        
        private AxTeePreviewPanelEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxTeePreviewPanel() : 
                base("1fdb3feb-a12b-4a8f-9ba7-cc342949d9af") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual TeeChart.TChart Chart {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Chart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int ChartLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartLink = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual bool AllowResize {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowResize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowResize;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowResize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowResize = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual bool AllowMove {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowMove", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AllowMove;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AllowMove", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AllowMove = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual bool AsBitmap {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AsBitmap", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.AsBitmap;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AsBitmap", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.AsBitmap = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual bool DragImage {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DragImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DragImage;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DragImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DragImage = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual TeeChart.ETeePreviewPanelOrientation Orientation {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Orientation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Orientation;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Orientation", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Orientation = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color PaperColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PaperColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.PaperColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PaperColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PaperColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        public virtual System.Drawing.Color ShadowColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShadowColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.ShadowColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShadowColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShadowColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual int ShadowSize {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShadowSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShadowSize;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShadowSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShadowSize = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual bool ShowImage {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowImage;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowImage = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual string Title {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Title", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Title;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Title", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Title = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual TeeChart.ITeePanelsList Panels {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Panels", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Panels;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        public virtual TeeChart.IGradient Gradient {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Gradient", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Gradient;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        public virtual TeeChart.IPen Margins {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Margins", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Margins;
            }
        }
        
        public event ITeePreviewPanelEvents_OnChangeMarginsEventHandler OnChangeMargins;
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void Repaint() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Repaint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Repaint();
        }
        
        public virtual void AddChart(TeeChart.TChart value) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddChart", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddChart(value);
        }
        
        public virtual void PrintPage() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PrintPage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PrintPage();
        }
        
        public virtual void AddChartLink(int value) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddChartLink(value);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxTeePreviewPanelEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(TeeChart.ITeePreviewPanelEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.ITeePreviewPanel)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnChangeMargins(object sender, ITeePreviewPanelEvents_OnChangeMarginsEvent e) {
            if ((this.OnChangeMargins != null)) {
                this.OnChangeMargins(sender, e);
            }
        }
    }
    
    public delegate void ITeePreviewPanelEvents_OnChangeMarginsEventHandler(object sender, ITeePreviewPanelEvents_OnChangeMarginsEvent e);
    
    public class ITeePreviewPanelEvents_OnChangeMarginsEvent {
        
        public bool disableProportional;
        
        public int left;
        
        public int top;
        
        public int right;
        
        public int bottom;
        
        public ITeePreviewPanelEvents_OnChangeMarginsEvent(bool disableProportional, int left, int top, int right, int bottom) {
            this.disableProportional = disableProportional;
            this.left = left;
            this.top = top;
            this.right = right;
            this.bottom = bottom;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxTeePreviewPanelEventMulticaster : TeeChart.ITeePreviewPanelEvents {
        
        private AxTeePreviewPanel parent;
        
        public AxTeePreviewPanelEventMulticaster(AxTeePreviewPanel parent) {
            this.parent = parent;
        }
        
        public virtual void OnChangeMargins(bool disableProportional, int left, int top, int right, int bottom) {
            ITeePreviewPanelEvents_OnChangeMarginsEvent onchangemarginsEvent = new ITeePreviewPanelEvents_OnChangeMarginsEvent(disableProportional, left, top, right, bottom);
            this.parent.RaiseOnOnChangeMargins(this.parent, onchangemarginsEvent);
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{a92b03a8-d509-4d2f-a953-b26ed8498ab0}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    public class AxChartGridNavigator : System.Windows.Forms.AxHost {
        
        private TeeChart.IChartGridNavigator ocx;
        
        public AxChartGridNavigator() : 
                base("a92b03a8-d509-4d2f-a953-b26ed8498ab0") {
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        public virtual TeeChart.ChartGrid Grid {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Grid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Grid = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual int GridLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GridLink = value;
            }
        }
        
        public virtual void EnableButtons() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableButtons", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.EnableButtons();
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.IChartGridNavigator)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{c4bb55c5-9f2c-4b46-86f3-f3bb52a83b4e}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    public class AxChartPageNavigator : System.Windows.Forms.AxHost {
        
        private TeeChart.IChartPageNavigator ocx;
        
        public AxChartPageNavigator() : 
                base("c4bb55c5-9f2c-4b46-86f3-f3bb52a83b4e") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual TeeChart.TChart Chart {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Chart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int ChartLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartLink = value;
            }
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void EnableButtons() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableButtons", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.EnableButtons();
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.IChartPageNavigator)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{2c37b0ad-0ff7-4e18-bf8a-b43469a2c414}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    public class AxChartEditorPanel : System.Windows.Forms.AxHost {
        
        private TeeChart.IChartEditorPanel ocx;
        
        public AxChartEditorPanel() : 
                base("2c37b0ad-0ff7-4e18-bf8a-b43469a2c414") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual TeeChart.TChart Chart {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Chart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int ChartLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartLink = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual TeeChart.EPanelBevel BevelOuter {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BevelOuter", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.BevelOuter;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BevelOuter", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BevelOuter = value;
            }
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void SelectUnderMouse() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectUnderMouse", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SelectUnderMouse();
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.IChartEditorPanel)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{4061f8f2-1d1c-11d5-9401-006008a7eed4}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    public class AxSeriesTextSource : System.Windows.Forms.AxHost {
        
        private TeeChart.ISeriesTextSource ocx;
        
        public AxSeriesTextSource() : 
                base("4061f8f2-1d1c-11d5-9401-006008a7eed4") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual TeeChart.TChart Chart {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Chart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int ChartLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartLink = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual bool Active {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Active", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Active;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Active", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Active = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        public virtual int HeaderLines {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HeaderLines", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.HeaderLines;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HeaderLines", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.HeaderLines = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual TeeChart.ISeriesTextFields Fields {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Fields", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Fields;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual string FieldSeparator {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FieldSeparator", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FieldSeparator;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FieldSeparator", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FieldSeparator = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual string FileName {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FileName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.FileName;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FileName", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.FileName = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        public virtual object Series {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Series", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Series;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Series", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Series = value;
            }
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual void Close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Close();
        }
        
        public virtual void Load() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Load", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Load();
        }
        
        public virtual void LoadAsStream(object aStream) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadAsStream", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadAsStream(aStream);
        }
        
        public virtual void LoadFromFile(string fileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFromFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadFromFile(fileName);
        }
        
        public virtual void LoadFromURL(string uRL) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFromURL", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadFromURL(uRL);
        }
        
        public virtual void Open() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Open", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Open();
        }
        
        public virtual TeeChart.ISeriesTextField AddField(string aName, int aIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddField", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            TeeChart.ISeriesTextField returnValue = ((TeeChart.ISeriesTextField)(this.ocx.AddField(aName, aIndex)));
            return returnValue;
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.ISeriesTextSource)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
    }
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{f069c83a-876f-4c9d-b540-d761428606db}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnClick")]
    public class AxChartGrid : System.Windows.Forms.AxHost {
        
        private TeeChart.IChartGrid ocx;
        
        private AxChartGridEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxChartGrid() : 
                base("f069c83a-876f-4c9d-b540-d761428606db") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(44)]
        public virtual TeeChart.TChart Chart {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Chart", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Chart = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        public virtual int ChartLink {
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChartLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ChartLink = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        public virtual int Col {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Col", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Col;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Col", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Col = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual int ColCount {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ColCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ColCount;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        public virtual bool EditorMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditorMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.EditorMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EditorMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.EditorMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        public virtual int GridHeight {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridHeight", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GridHeight;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual int GridWidth {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GridWidth;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual int LeftCol {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LeftCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LeftCol;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LeftCol", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LeftCol = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual int GridLink {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLink", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GridLink;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        public virtual bool ShowLabels {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowLabels;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowLabels = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        public virtual bool ShowColors {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowColors", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowColors;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowColors", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowColors = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        public virtual bool ShowFields {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowFields", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowFields;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowFields", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowFields = value;
            }
        }
        
        public event System.EventHandler OnClick;
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual int get_Colwidths(int index) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Colwidths", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_Colwidths(index)));
            return returnValue;
        }
        
        public virtual void set_Colwidths(int index, int value) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_Colwidths", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_Colwidths(index, value);
        }
        
        public virtual void RecalcDimensions() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RecalcDimensions", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RecalcDimensions();
        }
        
        public virtual TeeChart.IChartGridCols Cols() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Cols", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            TeeChart.IChartGridCols returnValue = ((TeeChart.IChartGridCols)(this.ocx.Cols()));
            return returnValue;
        }
        
        public virtual TeeChart.IChartGridRows Rows() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Rows", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            TeeChart.IChartGridRows returnValue = ((TeeChart.IChartGridRows)(this.ocx.Rows()));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxChartGridEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(TeeChart.IChartGridEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((TeeChart.IChartGrid)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnClick(object sender, System.EventArgs e) {
            if ((this.OnClick != null)) {
                this.OnClick(sender, e);
            }
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxChartGridEventMulticaster : TeeChart.IChartGridEvents {
        
        private AxChartGrid parent;
        
        public AxChartGridEventMulticaster(AxChartGrid parent) {
            this.parent = parent;
        }
        
        public virtual void OnClick() {
            System.EventArgs onclickEvent = new System.EventArgs();
            this.parent.RaiseOnOnClick(this.parent, onclickEvent);
        }
    }
}
